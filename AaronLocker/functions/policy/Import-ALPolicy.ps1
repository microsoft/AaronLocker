function Import-ALPolicy
{
<#
	.SYNOPSIS
		Imports AaronLocker policies from file.
	
	.DESCRIPTION
		Imports AaronLocker policies from file.
		Only applies to AaronLocker files generated by Export-ALPolicy
	
	.PARAMETER Path
		Path from which to import policies.
		Supports wildcards.
	
	.PARAMETER Force
		Overwrite existing policy if present
	
	.PARAMETER Activate
		Configures the imported policy as the new active (=default) policy.
	
	.EXAMPLE
		PS C:\> Import-ALPolicy -Path '.\OneDrive.policy.clixml'
	
		Imports the policy stored in OneDrive.policy.clixml.
	
	.EXAMPLE
		PS C:\> Import-ALPolicy -Path C:\Import\*.policy.clixml -Force
	
		Imports all policy export files in C:\Import and imports them, overwriting any policies that may already exist.
	
	.EXAMPLE
		PS C:\> Import-ALPolicy -Path '.\OneDrive.policy.clixml' -Activate
	
		Imports the policy stored in OneDrive.policy.clixml and selects it as the new activated (default) policy.
#>
	[CmdletBinding()]
	param (
		[Parameter(Mandatory = $true, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true)]
		[string[]]
		$Path,
		
		[switch]
		$Force,
		
		[switch]
		$Activate
	)
	process
	{
		foreach ($pathItem in $Path)
		{
			try { $resolvedPaths = Resolve-ALPath -Path $pathItem -Provider FileSystem }
			catch
			{
				$PSCmdlet.WriteError($_)
				continue
			}
			
			foreach ($resolvedPath in $resolvedPaths)
			{
				Write-Verbose "Processing import from $($resolvedPath)"
				if ((Get-Item $resolvedPath).PSIsContainer)
				{
					Write-Verbose "Is folder, skipping"
					continue
				}
				
				try { $policyData = Import-Clixml -Path $resolvedPath -ErrorAction Stop }
				catch
				{
					Write-ALError -ErrorRecord $_ -Message "Failed to import, possibly corrupt or bad data! : $_"
					continue
				}
				
				if ($policyData.GetType().FullName -ne 'AaronLocker.Policy')
				{
					Write-ALError -Message "Incorrect data type! Expected <AaronLocker.Policy>, received <$($policyData.GetType().FullName)>"
					continue
				}
				
				if ($script:_PolicyData.ContainsKey($policyData.Name) -and -not $Force)
				{
					Write-ALError -Message "Policy $($policyData.Name) already exists! Use the '-Force' parameter to overwrite it"
					continue
				}
				
				$script:_PolicyData[$policyData.Name] = $policyData
				Update-PolicyFile -PolicyName $policyData.Name
				
				if ($Activate) { Set-ALActivePolicy -PolicyName $policyData.Name }
			}
		}
	}
}
